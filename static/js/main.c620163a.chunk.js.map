{"version":3,"sources":["components/Sidebar/Sidebar.js","Services/config.js","Services/Api/index.js","Services/weather/index.js","components/Content/CurrentDay/CurrentDay.js","components/Content/OtherDay/OtherDay.js","components/UI/Spinner/index.js","components/Content/Content.js","Main/Main.js","Actions/Actions.js","Constants/index.js","App.js","serviceWorker.js","Reducers/system.js","Sagas/system.js","Sagas/index.js","Reducers/rootReducer.js","index.js"],"names":["Sidebar","cities","changeCity","active","className","map","city","id","key","onClick","title","config","API_ROOT","API_KEY","API_UNITS","axios","defaults","params","request","create","baseURL","CurrentDay","item","Array","isArray","weather","name","moment","unix","dt","format","main","temp","toFixed","description","temp_max","wind","speed","sys","sunrise","clouds","all","temp_min","sunset","OtherDay","items","Spinner","Content","currentDayInfo","otherDaysList","isLoading","data","Main","cityId","useSelector","state","system","activeCityId","dispatch","useDispatch","useEffect","type","payload","getCurrentWeather","App","Boolean","window","location","hostname","match","initialState","list","filter","getOtherDays","root","action","call","api","get","APPID","units","put","console","log","takeLatest","rootSaga","fork","history","sagaMiddleware","createSagaMiddleware","createBrowserHistory","middlewares","routerMiddleware","store","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","run","runSaga","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c620163a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./sidebar.scss\";\r\n\r\nfunction Sidebar({ cities, changeCity, active }) {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <ul>\r\n        <div className=\"logo\">WEATHER SPA</div>\r\n\r\n        {cities.map((city) => (\r\n          <li \r\n            className={active === city.id ? \"active\" : \"\"} \r\n            key={city.id}\r\n            onClick={() => changeCity(city.id)}\r\n          >\r\n            {city.title}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","const config = {\r\n    API_ROOT: 'http://api.openweathermap.org',\r\n    API_KEY: 'f5bdbf65e6a727a989287cb8c9864733',\r\n    API_UNITS: 'metric'\r\n};\r\n\r\nexport default config;","import axios from 'axios';\r\nimport config from '../config';\r\n\r\naxios.defaults.params = {};\r\naxios.defaults.params['APPID'] = config.API_KEY;\r\naxios.defaults.params['units'] = config.API_UNITS;\r\n\r\n\r\nexport default {\r\n    request: axios.create({\r\n        baseURL: config.API_ROOT\r\n    }),\r\n};","const name = (id) => {\r\n    if(id > 199 && id < 233){\r\n        return 'thunderstorm'\r\n    }\r\n    else if(id > 299 && id < 322){\r\n        return 'drizzle'\r\n    }\r\n    else if(id > 499 && id < 532){\r\n        return 'rain'\r\n    }\r\n    else if(id > 599 && id < 632){\r\n        return 'snow'\r\n    }\r\n    else if(id > 700 && id < 782){\r\n        return 'atmosphere'\r\n    }\r\n    else if(id === 800){\r\n        return 'clear'\r\n    }\r\n    else if(id > 800 && id < 805){\r\n        return 'clouds'\r\n    }\r\n    else {\r\n        return 'default-img'\r\n    }\r\n};\r\n\r\nexport default {\r\n    name\r\n}","import React, {Fragment} from 'react'\r\nimport moment from 'moment';\r\nimport {weather} from '../../../Services/';\r\n\r\nimport './CurrentDay.scss'\r\n\r\nfunction CurrentDay({item}) {\r\n    return (\r\n        <div className={'current-day'}>\r\n            {Array.isArray(item.weather) && (\r\n                <Fragment>\r\n                    <h2 className=\"title\">\r\n                        {item.name}\r\n                    </h2>\r\n                    <div className=\"date\">\r\n                        {moment.unix(item.dt).format('dddd DD MMMM')}\r\n                    </div>\r\n                    <div className=\"current-day__block\">\r\n                        <div className=\"block-main\">\r\n                            <div className={`weather-icon weather-icon-${weather.name(item.weather[0].id)}`}/>\r\n                            <div className=\"text\">\r\n                                <span\r\n                                    className='temp'>{item.main.temp > 0 ? '+' : ''}{item.main.temp.toFixed(0)}Â°</span>\r\n                                <span className={'desc'}>{item.weather[0].description}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"right-block\">\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{item.main.temp_max}Â°</div>\r\n                                <div className=\"desc\">Hight</div>\r\n                            </div>\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{item.wind.speed}Mph</div>\r\n                                <div className=\"desc\">Wind</div>\r\n                            </div>\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{moment.unix(item.sys.sunrise).format('hh:mm')}</div>\r\n                                <div className=\"desc\">Sunrise</div>\r\n                            </div>\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{item.clouds.all}%</div>\r\n                                <div className=\"desc\">Rain</div>\r\n                            </div>\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{item.main.temp_min}Â°</div>\r\n                                <div className=\"desc\">Low</div>\r\n                            </div>\r\n\r\n                            <div className=\"item\">\r\n                                <div className=\"label\">{moment.unix(item.sys.sunset).format('hh:mm')}</div>\r\n                                <div className=\"desc\">Sunset</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentDay;","import React from 'react'\r\nimport moment from 'moment'\r\n\r\nimport { weather } from '../../../Services';\r\nimport './OtherDay.scss';\r\n\r\nfunction OtherDay({ items }) {\r\n    return (\r\n        <div className=\"other_days_block\">\r\n            {items && items.map(items => (\r\n                <div className='other-day-item' key={items.dt}>\r\n                    <span className='weather-day'>{moment.unix(items.dt).format('dddd')}</span>\r\n                    <div className=\"wrap\">\r\n                        <div className={`weather-icon-small weather-icon-${weather.name(items.weather[0].id)}`}></div>\r\n                        <div className=\"text\">\r\n                            <span className='temp'>{items.main.temp > 0 ? '+' : ''}{items.main.temp.toFixed(0)}Â°</span>\r\n                            <span className={'desc'}>{items.weather[0].main}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherDay;","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-zqc49382xdm\">\r\n            <div className=\"ldio-c01oyommzfe\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react'\r\nimport CurrentDay from \"./CurrentDay/CurrentDay\";\r\nimport OtherDay from \"./OtherDay/OtherDay\";\r\nimport Spinner from \"../UI/Spinner\"\r\nimport './Content.scss'\r\n\r\nfunction Content({currentDayInfo}) {\r\n\r\n    const {all, otherDaysList} = currentDayInfo\r\n\r\n    return (\r\n        <div className={'content'}>\r\n            {!all.isLoading && !otherDaysList.isLoading ? (\r\n                <>\r\n                    <CurrentDay item={all.data}/>\r\n                    <OtherDay items={otherDaysList.data}/>\r\n                </>\r\n            ) : (\r\n                <div><Spinner /></div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { getCurrentWeather, changeCity, getOtherDays } from \"../Actions/Actions\";\r\nimport Sidebar from \"../components/Sidebar/Sidebar\";\r\nimport Content from \"../components/Content/Content\";\r\nimport './Main.scss'\r\n\r\nfunction Main() {\r\n  const cityId = useSelector((state) => state.system.activeCityId);\r\n  const currentDayInfo = useSelector(state => state.system)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const hanlerId = (id)=>{\r\n    dispatch(changeCity(id))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getCurrentWeather(cityId));\r\n    dispatch(getOtherDays());\r\n  }, [dispatch, cityId]);\r\n\r\n  const cities = [\r\n    {\r\n        id: 1512569,\r\n        title: 'Tashkent'\r\n    },\r\n    {\r\n        id: 1514588,\r\n        title: 'Andijan'\r\n    },\r\n    {\r\n        id: 1217662,\r\n        title: 'Bukhara'\r\n    },\r\n    {\r\n        id: 1484845,\r\n        title: 'Fergana'\r\n    },\r\n    {\r\n        id: 1513886,\r\n        title: 'Jizzakh'\r\n    },{\r\n        id: 1484843,\r\n        title: 'Xorazm'\r\n    },\r\n    {\r\n        id: 1513157,\r\n        title: 'Namangan'\r\n    },\r\n    {\r\n        id: 1513131,\r\n        title: 'Navoiy'\r\n    },\r\n    {\r\n        id: 1114928,\r\n        title: 'Qashqadaryo'\r\n    },\r\n    {\r\n        id: 1216265,\r\n        title: 'Samarqand'\r\n    },\r\n    {\r\n        id: 1484840,\r\n        title: 'Sirdaryo'\r\n    },\r\n    {\r\n        id: 1114926,\r\n        title: 'Surxondaryo'\r\n    }\r\n];\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n        <Sidebar changeCity={hanlerId} cities={cities} active={cityId}/>\r\n        <Content currentDayInfo={currentDayInfo}/>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Main;\r\n","import {\r\n  GET_CURRENT_WEATHER_REQUEST,\r\n  GET_OTHER_DAYS_REQUEST,\r\n  CHANGE_CITY_REQUEST,\r\n} from \"../Constants\";\r\n\r\nexport const getCurrentWeather = (cityId) => {\r\n  return {\r\n    type: GET_CURRENT_WEATHER_REQUEST,\r\n    payload: cityId,\r\n  };\r\n};\r\n\r\nexport const changeCity = (cityId) => ({\r\n  type: CHANGE_CITY_REQUEST,\r\n  payload: cityId,\r\n});\r\n\r\nexport const getOtherDays = () => {\r\n  return {\r\n    type: GET_OTHER_DAYS_REQUEST,\r\n  };\r\n};\r\n","export const GET_CURRENT_WEATHER_REQUEST = 'GET_CURRENT_WEATHER_REQUEST';\r\nexport const GET_CURRENT_WEATHER_SUCCESS = 'GET_CURRENT_WEATHER_SUCCESS';\r\nexport const GET_CURRENT_WEATHER_FAILURE = 'GET_CURRENT_WEATHER_FAILURE';\r\n\r\nexport const CHANGE_CITY_REQUEST = \"CHANGE_CITY_REQUEST\";\r\n\r\nexport const GET_OTHER_DAYS_REQUEST = 'GET_OTHER_DAYS_REQUEST';\r\nexport const GET_OTHER_DAYS_SUCCESS = 'GET_OTHER_DAYS_SUCCESS';\r\nexport const GET_OTHER_DAYS_FAILURE = 'GET_OTHER_DAYS_FAILURE';","import React from 'react';\nimport Main from './Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import moment from \"moment\";\r\n\r\nimport {\r\n  GET_CURRENT_WEATHER_REQUEST,\r\n  GET_CURRENT_WEATHER_SUCCESS,\r\n  GET_OTHER_DAYS_REQUEST,\r\n  GET_OTHER_DAYS_SUCCESS,\r\n  CHANGE_CITY_REQUEST,\r\n} from \"../Constants\";\r\n\r\nconst initialState = {\r\n  all: {\r\n    isLoading: true,\r\n    data: {},\r\n  },\r\n  activeCityId: 1512569,\r\n  otherDaysList: {\r\n    isLoading: true,\r\n    data: [],\r\n  },\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case GET_CURRENT_WEATHER_REQUEST: {\r\n      return {\r\n        ...state,\r\n        all: {\r\n          isLoading: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    case GET_CURRENT_WEATHER_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        all: {\r\n          data: payload,\r\n          isLoading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case CHANGE_CITY_REQUEST: {\r\n      return {\r\n        ...state,\r\n        activeCityId: payload\r\n      };\r\n    }\r\n\r\n    case GET_OTHER_DAYS_REQUEST: {\r\n      return {\r\n        ...state,\r\n        otherDaysList: {\r\n          isLoading: true,\r\n        },\r\n      };\r\n    }\r\n    case GET_OTHER_DAYS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        otherDaysList: {\r\n          isLoading: false,\r\n\r\n          data: payload.list.filter((item) => {\r\n            if (\r\n              moment.unix(item.dt).format(\"HH:mm\") === \"11:00\" &&\r\n              moment().format(\"DD/MM/YYYY\") !==\r\n                moment.unix(item.dt).format(\"DD/MM/YYYY\")\r\n            ) {\r\n              return item;\r\n            }\r\n          }),\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  GET_CURRENT_WEATHER_REQUEST,\r\n  GET_CURRENT_WEATHER_SUCCESS,\r\n  GET_CURRENT_WEATHER_FAILURE,\r\n  GET_OTHER_DAYS_SUCCESS,\r\n  GET_OTHER_DAYS_FAILURE,\r\n  CHANGE_CITY_REQUEST,\r\n} from \"../Constants\";\r\nimport { api } from \"../Services\";\r\nimport config from \"../Services/config\";\r\n\r\nfunction* getCurrentWeather(action) {\r\n  try {\r\n    const { data } = yield call(\r\n      api.request.get,\r\n      `/data/2.5/weather?id=${action.payload}`,\r\n      {\r\n        params: {\r\n          APPID: config.API_KEY,\r\n          units: config.API_UNITS,\r\n        },\r\n      }\r\n    );\r\n\r\n    yield put({\r\n      type: GET_CURRENT_WEATHER_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: GET_CURRENT_WEATHER_FAILURE,\r\n      payload: error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getOtherDays(action) {\r\n  try {\r\n    const { data } = yield call(\r\n      api.request.get,\r\n      `/data/2.5/forecast?id=${action.payload}`,\r\n      {\r\n        params: {\r\n          APPID: config.API_KEY,\r\n          units: config.API_UNITS,\r\n        },\r\n      }\r\n    );\r\n    yield put({\r\n      type: GET_OTHER_DAYS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: GET_OTHER_DAYS_FAILURE,\r\n      payload: error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* changeCity(action) {\r\n  console.log('clicked')\r\n}\r\n\r\nexport default function* root() {\r\n  yield takeLatest(GET_CURRENT_WEATHER_REQUEST, getCurrentWeather);\r\n  yield takeLatest(GET_CURRENT_WEATHER_REQUEST, getOtherDays);\r\n  yield takeLatest(CHANGE_CITY_REQUEST, changeCity);\r\n}\r\n","import { all, fork} from 'redux-saga/effects';\r\n\r\nimport system from './system';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(system)\r\n    ])\r\n}","import { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\nimport system from './system'\r\n\r\nexport default history => combineReducers({\r\n    router: connectRouter(history),\r\n    system\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware, ConnectedRouter} from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './Reducers/rootReducer';\nimport runSaga from './Sagas/';\nimport './index.css'\n\nconst sagaMiddleware = createSagaMiddleware();\nconst history = createBrowserHistory();\nconst middlewares = [sagaMiddleware, routerMiddleware(history)];\nconst store = createStore(\n  rootReducer(history),\n  composeWithDevTools(applyMiddleware(...middlewares))\n)\nsagaMiddleware.run(runSaga)\n\nconst app = (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}